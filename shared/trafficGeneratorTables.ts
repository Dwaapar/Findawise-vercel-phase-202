import { pgTable, text, serial, integer, boolean, timestamp, varchar, jsonb, real } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// ===== PROGRAMMATIC BLOG SWARM TABLES =====

export const blogSwarmPosts = pgTable("blog_swarm_posts", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  slug: text("slug").notNull().unique(),
  content: text("content").notNull(),
  excerpt: text("excerpt"),
  metaDescription: text("meta_description"),
  keywords: jsonb("keywords").$type<string[]>().default([]),
  tags: jsonb("tags").$type<string[]>().default([]),
  category: text("category").notNull(),
  vertical: text("vertical").notNull(),
  city: text("city"),
  state: text("state"),
  country: text("country").default("US"),
  painPoint: text("pain_point"),
  trend: text("trend"),
  seoScore: real("seo_score").default(0),
  readabilityScore: real("readability_score").default(0),
  status: text("status").notNull().default("draft"), // draft, published, archived
  publishedAt: timestamp("published_at"),
  lastOptimizedAt: timestamp("last_optimized_at"),
  viewCount: integer("view_count").default(0),
  shareCount: integer("share_count").default(0),
  backlinks: integer("backlinks").default(0),
  bounceRate: real("bounce_rate").default(0),
  avgTimeOnPage: real("avg_time_on_page").default(0),
  conversionRate: real("conversion_rate").default(0),
  affiliateLinks: jsonb("affiliate_links").$type<Array<{
    url: string;
    text: string;
    network: string;
    commission: number;
  }>>().default([]),
  internalLinks: jsonb("internal_links").$type<Array<{
    url: string;
    text: string;
    type: string;
  }>>().default([]),
  faqSection: jsonb("faq_section").$type<Array<{
    question: string;
    answer: string;
    schema: boolean;
  }>>().default([]),
  schemaMarkup: jsonb("schema_markup").$type<Record<string, any>>().default({}),
  ogTags: jsonb("og_tags").$type<Record<string, string>>().default({}),
  autoGenerated: boolean("auto_generated").default(true),
  optimizationNotes: text("optimization_notes"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const blogSwarmTemplates = pgTable("blog_swarm_templates", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  vertical: text("vertical").notNull(),
  template: text("template").notNull(),
  variables: jsonb("variables").$type<string[]>().default([]),
  seoOptimized: boolean("seo_optimized").default(true),
  conversionOptimized: boolean("conversion_optimized").default(true),
  usageCount: integer("usage_count").default(0),
  successRate: real("success_rate").default(0),
  avgSeoScore: real("avg_seo_score").default(0),
  avgConversionRate: real("avg_conversion_rate").default(0),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const blogSwarmKeywords = pgTable("blog_swarm_keywords", {
  id: serial("id").primaryKey(),
  keyword: text("keyword").notNull().unique(),
  vertical: text("vertical").notNull(),
  searchVolume: integer("search_volume").default(0),
  competition: real("competition").default(0),
  cpc: real("cpc").default(0),
  difficulty: real("difficulty").default(0),
  intent: text("intent"), // informational, commercial, transactional, navigational
  trending: boolean("trending").default(false),
  seasonal: boolean("seasonal").default(false),
  lastUpdated: timestamp("last_updated").defaultNow(),
  usageCount: integer("usage_count").default(0),
  avgRanking: real("avg_ranking").default(0),
  totalClicks: integer("total_clicks").default(0),
  totalImpressions: integer("total_impressions").default(0),
  ctr: real("ctr").default(0),
  createdAt: timestamp("created_at").defaultNow()
});

export const blogSwarmAnalytics = pgTable("blog_swarm_analytics", {
  id: serial("id").primaryKey(),
  postId: integer("post_id").references(() => blogSwarmPosts.id),
  date: timestamp("date").notNull(),
  pageViews: integer("page_views").default(0),
  uniqueVisitors: integer("unique_visitors").default(0),
  bounceRate: real("bounce_rate").default(0),
  avgTimeOnPage: real("avg_time_on_page").default(0),
  shares: integer("shares").default(0),
  comments: integer("comments").default(0),
  backlinks: integer("backlinks").default(0),
  organicClicks: integer("organic_clicks").default(0),
  organicImpressions: integer("organic_impressions").default(0),
  averagePosition: real("average_position").default(0),
  affiliateClicks: integer("affiliate_clicks").default(0),
  affiliateConversions: integer("affiliate_conversions").default(0),
  revenue: real("revenue").default(0),
  leads: integer("leads").default(0),
  emailSignups: integer("email_signups").default(0),
  createdAt: timestamp("created_at").defaultNow()
});

// ===== NEWSLETTER/EMAIL MAGNET SYSTEM TABLES =====

export const newsletterCampaigns = pgTable("newsletter_campaigns", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  subject: text("subject").notNull(),
  content: text("content").notNull(),
  htmlContent: text("html_content"),
  vertical: text("vertical").notNull(),
  type: text("type").notNull().default("digest"), // digest, promotional, educational, update
  frequency: text("frequency").notNull().default("weekly"), // daily, weekly, monthly
  status: text("status").notNull().default("draft"), // draft, scheduled, sent, paused
  scheduledAt: timestamp("scheduled_at"),
  sentAt: timestamp("sent_at"),
  recipientCount: integer("recipient_count").default(0),
  openRate: real("open_rate").default(0),
  clickRate: real("click_rate").default(0),
  unsubscribeRate: real("unsubscribe_rate").default(0),
  conversionRate: real("conversion_rate").default(0),
  revenue: real("revenue").default(0),
  affiliateLinks: jsonb("affiliate_links").$type<Array<{
    url: string;
    text: string;
    network: string;
    clicks: number;
    conversions: number;
  }>>().default([]),
  autoGenerated: boolean("auto_generated").default(true),
  sourceFeeds: jsonb("source_feeds").$type<string[]>().default([]),
  abTestVariant: text("ab_test_variant"),
  parentCampaignId: integer("parent_campaign_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const newsletterSubscribers = pgTable("newsletter_subscribers", {
  id: serial("id").primaryKey(),
  email: text("email").notNull().unique(),
  firstName: text("first_name"),
  lastName: text("last_name"),
  status: text("status").notNull().default("active"), // active, paused, unsubscribed
  source: text("source"), // blog, landing_page, social, api, import
  vertical: text("vertical"),
  interests: jsonb("interests").$type<string[]>().default([]),
  preferences: jsonb("preferences").$type<{
    frequency: string;
    contentTypes: string[];
    language: string;
    timezone: string;
  }>().default({}),
  segments: jsonb("segments").$type<string[]>().default([]),
  tags: jsonb("tags").$type<string[]>().default([]),
  engagementScore: real("engagement_score").default(0),
  lifetimeValue: real("lifetime_value").default(0),
  totalOpens: integer("total_opens").default(0),
  totalClicks: integer("total_clicks").default(0),
  lastOpenAt: timestamp("last_open_at"),
  lastClickAt: timestamp("last_click_at"),
  subscribedAt: timestamp("subscribed_at").defaultNow(),
  unsubscribedAt: timestamp("unsubscribed_at"),
  gdprConsent: boolean("gdpr_consent").default(false),
  ccpaOptOut: boolean("ccpa_opt_out").default(false),
  doubleOptIn: boolean("double_opt_in").default(false),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const newsletterAnalytics = pgTable("newsletter_analytics", {
  id: serial("id").primaryKey(),
  campaignId: integer("campaign_id").references(() => newsletterCampaigns.id),
  subscriberId: integer("subscriber_id").references(() => newsletterSubscribers.id),
  event: text("event").notNull(), // sent, opened, clicked, unsubscribed, bounced, complained
  timestamp: timestamp("timestamp").defaultNow(),
  linkUrl: text("link_url"),
  deviceType: text("device_type"),
  userAgent: text("user_agent"),
  ipAddress: text("ip_address"),
  location: jsonb("location").$type<{
    country: string;
    state: string;
    city: string;
  }>().default({}),
  metadata: jsonb("metadata").$type<Record<string, any>>().default({})
});

// ===== DYNAMIC Q&A/FORUM MODULE TABLES =====

export const forumCategories = pgTable("forum_categories", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  vertical: text("vertical").notNull(),
  icon: text("icon"),
  color: text("color"),
  sortOrder: integer("sort_order").default(0),
  postCount: integer("post_count").default(0),
  isActive: boolean("is_active").default(true),
  seoOptimized: boolean("seo_optimized").default(true),
  metaDescription: text("meta_description"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const forumPosts = pgTable("forum_posts", {
  id: serial("id").primaryKey(),
  categoryId: integer("category_id").references(() => forumCategories.id),
  title: text("title").notNull(),
  slug: text("slug").notNull().unique(),
  content: text("content").notNull(),
  excerpt: text("excerpt"),
  authorId: integer("author_id"),
  authorName: text("author_name"),
  authorEmail: text("author_email"),
  status: text("status").notNull().default("published"), // draft, published, moderated, archived
  type: text("type").notNull().default("question"), // question, discussion, announcement
  isPinned: boolean("is_pinned").default(false),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  upvotes: integer("upvotes").default(0),
  downvotes: integer("downvotes").default(0),
  answerCount: integer("answer_count").default(0),
  hasAcceptedAnswer: boolean("has_accepted_answer").default(false),
  lastActivityAt: timestamp("last_activity_at").defaultNow(),
  tags: jsonb("tags").$type<string[]>().default([]),
  seoScore: real("seo_score").default(0),
  metaDescription: text("meta_description"),
  schemaMarkup: jsonb("schema_markup").$type<Record<string, any>>().default({}),
  aiGenerated: boolean("ai_generated").default(false),
  sourceUrl: text("source_url"),
  sourcePlatform: text("source_platform"), // reddit, quora, stackoverflow
  moderationFlags: jsonb("moderation_flags").$type<string[]>().default([]),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const forumAnswers = pgTable("forum_answers", {
  id: serial("id").primaryKey(),
  postId: integer("post_id").references(() => forumPosts.id),
  content: text("content").notNull(),
  authorId: integer("author_id"),
  authorName: text("author_name"),
  authorEmail: text("author_email"),
  isAccepted: boolean("is_accepted").default(false),
  upvotes: integer("upvotes").default(0),
  downvotes: integer("downvotes").default(0),
  aiGenerated: boolean("ai_generated").default(false),
  sourceUrl: text("source_url"),
  sourcePlatform: text("source_platform"),
  helpfulnessScore: real("helpfulness_score").default(0),
  moderationFlags: jsonb("moderation_flags").$type<string[]>().default([]),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

// ===== RESOURCE/TOOL DIRECTORY TABLES =====

export const resourceCategories = pgTable("resource_categories", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  icon: text("icon"),
  vertical: text("vertical").notNull(),
  sortOrder: integer("sort_order").default(0),
  resourceCount: integer("resource_count").default(0),
  isActive: boolean("is_active").default(true),
  seoOptimized: boolean("seo_optimized").default(true),
  metaDescription: text("meta_description"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const resourceDirectory = pgTable("resource_directory", {
  id: serial("id").primaryKey(),
  categoryId: integer("category_id").references(() => resourceCategories.id),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  url: text("url").notNull(),
  logoUrl: text("logo_url"),
  thumbnailUrl: text("thumbnail_url"),
  type: text("type").notNull(), // tool, saas, guide, app, book, course
  pricing: text("pricing"), // free, freemium, paid, subscription
  priceRange: text("price_range"),
  features: jsonb("features").$type<string[]>().default([]),
  tags: jsonb("tags").$type<string[]>().default([]),
  rating: real("rating").default(0),
  reviewCount: integer("review_count").default(0),
  clickCount: integer("click_count").default(0),
  affiliateUrl: text("affiliate_url"),
  affiliateNetwork: text("affiliate_network"),
  commission: real("commission").default(0),
  isAffiliate: boolean("is_affiliate").default(false),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  status: text("status").notNull().default("active"), // active, pending, rejected, archived
  sourceApi: text("source_api"),
  lastSyncAt: timestamp("last_sync_at"),
  seoScore: real("seo_score").default(0),
  metaDescription: text("meta_description"),
  submittedBy: text("submitted_by"),
  moderatedBy: text("moderated_by"),
  moderatedAt: timestamp("moderated_at"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const resourceReviews = pgTable("resource_reviews", {
  id: serial("id").primaryKey(),
  resourceId: integer("resource_id").references(() => resourceDirectory.id),
  authorName: text("author_name"),
  authorEmail: text("author_email"),
  rating: integer("rating").notNull(),
  title: text("title"),
  content: text("content"),
  pros: jsonb("pros").$type<string[]>().default([]),
  cons: jsonb("cons").$type<string[]>().default([]),
  verified: boolean("verified").default(false),
  helpful: integer("helpful").default(0),
  status: text("status").notNull().default("pending"), // pending, approved, rejected
  moderatedBy: text("moderated_by"),
  moderatedAt: timestamp("moderated_at"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

// ===== VIRAL DATA VISUALIZATION HUB TABLES =====

export const dataVisualizations = pgTable("data_visualizations", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  type: text("type").notNull(), // chart, infographic, comparison, stats
  vertical: text("vertical").notNull(),
  chartType: text("chart_type"), // bar, line, pie, scatter, heatmap
  dataSource: text("data_source"),
  dataUrl: text("data_url"),
  config: jsonb("config").$type<Record<string, any>>().default({}),
  embedCode: text("embed_code"),
  shareableUrl: text("shareable_url"),
  viewCount: integer("view_count").default(0),
  shareCount: integer("share_count").default(0),
  embedCount: integer("embed_count").default(0),
  likes: integer("likes").default(0),
  downloadCount: integer("download_count").default(0),
  tags: jsonb("tags").$type<string[]>().default([]),
  isViral: boolean("is_viral").default(false),
  viralScore: real("viral_score").default(0),
  seoOptimized: boolean("seo_optimized").default(true),
  metaDescription: text("meta_description"),
  ogImage: text("og_image"),
  status: text("status").notNull().default("active"), // active, draft, archived
  createdBy: text("created_by"),
  lastUpdated: timestamp("last_updated").defaultNow(),
  createdAt: timestamp("created_at").defaultNow()
});

export const dataVisualizationAnalytics = pgTable("data_visualization_analytics", {
  id: serial("id").primaryKey(),
  visualizationId: integer("visualization_id").references(() => dataVisualizations.id),
  date: timestamp("date").notNull(),
  views: integer("views").default(0),
  shares: integer("shares").default(0),
  embeds: integer("embeds").default(0),
  downloads: integer("downloads").default(0),
  likes: integer("likes").default(0),
  comments: integer("comments").default(0),
  timeSpent: real("time_spent").default(0),
  bounceRate: real("bounce_rate").default(0),
  conversionRate: real("conversion_rate").default(0),
  referralSources: jsonb("referral_sources").$type<Record<string, number>>().default({}),
  socialPlatforms: jsonb("social_platforms").$type<Record<string, number>>().default({}),
  createdAt: timestamp("created_at").defaultNow()
});

// ===== API PUBLIC PORTAL TABLES =====

export const publicApis = pgTable("public_apis", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  endpoint: text("endpoint").notNull(),
  method: text("method").notNull().default("GET"),
  category: text("category").notNull(),
  vertical: text("vertical").notNull(),
  rateLimit: integer("rate_limit").default(1000),
  rateLimitPeriod: text("rate_limit_period").default("hour"),
  requiresAuth: boolean("requires_auth").default(false),
  authType: text("auth_type"), // api_key, bearer, basic
  pricing: text("pricing").notNull().default("free"), // free, freemium, paid
  usageCount: integer("usage_count").default(0),
  documentation: text("documentation"),
  exampleRequest: text("example_request"),
  exampleResponse: text("example_response"),
  responseFormat: text("response_format").default("json"),
  status: text("status").notNull().default("active"), // active, deprecated, maintenance
  version: text("version").default("1.0"),
  tags: jsonb("tags").$type<string[]>().default([]),
  seoOptimized: boolean("seo_optimized").default(true),
  metaDescription: text("meta_description"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

export const apiKeys = pgTable("api_keys", {
  id: serial("id").primaryKey(),
  keyHash: text("key_hash").notNull().unique(),
  name: text("name").notNull(),
  email: text("email").notNull(),
  company: text("company"),
  website: text("website"),
  plan: text("plan").notNull().default("free"), // free, pro, enterprise
  rateLimit: integer("rate_limit").default(1000),
  rateLimitPeriod: text("rate_limit_period").default("hour"),
  usageCount: integer("usage_count").default(0),
  lastUsedAt: timestamp("last_used_at"),
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow(),
  expiresAt: timestamp("expires_at")
});

export const apiUsageAnalytics = pgTable("api_usage_analytics", {
  id: serial("id").primaryKey(),
  apiId: integer("api_id").references(() => publicApis.id),
  keyId: integer("key_id").references(() => apiKeys.id),
  endpoint: text("endpoint").notNull(),
  method: text("method").notNull(),
  statusCode: integer("status_code").notNull(),
  responseTime: real("response_time").notNull(),
  requestSize: integer("request_size").default(0),
  responseSize: integer("response_size").default(0),
  userAgent: text("user_agent"),
  ipAddress: text("ip_address"),
  referrer: text("referrer"),
  timestamp: timestamp("timestamp").defaultNow(),
  date: timestamp("date").notNull()
});

export const publicWidgets = pgTable("public_widgets", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  type: text("type").notNull(), // chart, calculator, tool, feed
  category: text("category").notNull(),
  vertical: text("vertical").notNull(),
  embedCode: text("embed_code").notNull(),
  previewUrl: text("preview_url"),
  config: jsonb("config").$type<Record<string, any>>().default({}),
  customizable: boolean("customizable").default(true),
  brandingOptions: jsonb("branding_options").$type<{
    showLogo: boolean;
    customColors: boolean;
    customFonts: boolean;
  }>().default({}),
  usageCount: integer("usage_count").default(0),
  domains: jsonb("domains").$type<string[]>().default([]),
  allowedDomains: jsonb("allowed_domains").$type<string[]>().default([]),
  tags: jsonb("tags").$type<string[]>().default([]),
  documentation: text("documentation"),
  isActive: boolean("is_active").default(true),
  seoOptimized: boolean("seo_optimized").default(true),
  metaDescription: text("meta_description"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow()
});

// Create insert schemas
export const insertBlogSwarmPostSchema = createInsertSchema(blogSwarmPosts);
export const insertBlogSwarmTemplateSchema = createInsertSchema(blogSwarmTemplates);
export const insertBlogSwarmKeywordSchema = createInsertSchema(blogSwarmKeywords);
export const insertNewsletterCampaignSchema = createInsertSchema(newsletterCampaigns);
export const insertNewsletterSubscriberSchema = createInsertSchema(newsletterSubscribers);
export const insertForumCategorySchema = createInsertSchema(forumCategories);
export const insertForumPostSchema = createInsertSchema(forumPosts);
export const insertForumAnswerSchema = createInsertSchema(forumAnswers);
export const insertResourceCategorySchema = createInsertSchema(resourceCategories);
export const insertResourceDirectorySchema = createInsertSchema(resourceDirectory);
export const insertDataVisualizationSchema = createInsertSchema(dataVisualizations);
export const insertPublicApiSchema = createInsertSchema(publicApis);
export const insertApiKeySchema = createInsertSchema(apiKeys);
export const insertPublicWidgetSchema = createInsertSchema(publicWidgets);